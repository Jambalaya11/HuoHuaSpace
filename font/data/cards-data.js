var local_cardbase = [
  {
    title: "堆 (数据结构)",
    content: "堆（英语：Heap）是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。在队列中，调度程序反复提取队列中第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构。",
    cardId:0,
  },

  {    
    title: "队列",
    content: "队列，又称为伫列（queue），是先进先出（FIFO, First-In - First - Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。",
    cardId:1,
  },

  {
    title: "集合 (计算机科学)",
    content: "在计算机科学中，集合是一组可变数量的数据项（也可能是0个）的组合，这些数据项可能共享某些特征，需要以某种操作方式一起进行操作。一般来讲，这些数据项的类型是相同的，或基类相同（若使用的语言支持继承）。列表（或数组）通常不被认为是集合，因为其大小固定，但事实上它常常在实现中作为某些形式的集合使用。集合的种类包括列表，集，多重集，树和图。枚举类型可以是列表或集。",
    cardId:2,
  },

  {
    title: "容器 (抽象数据类型)",
    content: "在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。",
    cardId:3,
  },
  {
    title: "列表 (抽象数据类型)",
    content: "在计算机科学中，列表（英语：list）或序列（sequence），是一种抽象数据类型，一种有限的有序值的集合，其中每个值可以出现多次。列表的一个实例是在计算机中用来表现出数学上有限序列的概念；列表的无限类似是流。列表是容器的一个基本例子，因为它们包含其他值。在列表中的每个值(value)，称为项目（item）、条目（entry）或元素（element）；如果相同的值出现多次，每一次出现都认为是分立的一个项目。列表和数组区别在列表只允许顺序访问，而数组允许随机访问。在数据结构中，也使用这个名称，表示实现出列表的数据结构，尤指链表（linked list）。所谓静态列表结构只允许对值的审查和枚举。一个可变对象或动态列表在其生存周期内允许条目被插入、替换或删除。许多编程语言支持列表数据类型，针对列表和列表运算有特定的语法和逻辑。通常可以通过写入序列中的元素来创建列表。元素用逗号、分号或空格分开，位于一对括号(如圆括号 '()', 方括号, '[]', 花括号 '{}', 以及尖括号 '<>')内部。",
    cardId:4,
  },
  {
    title: "双向链表",
    content: "双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。",
    cardId:5,
  },
]


module.exports = {
  cardList: local_cardbase,
}